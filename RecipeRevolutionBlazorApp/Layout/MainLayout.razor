@using RecipeRevolutionBlazorApp.Models.Category
@using RecipeRevolutionBlazorApp.Models.User
@using RecipeRevolutionBlazorApp.Services.Recipes
@using RecipeRevolutionBlazorApp.Services.Token
@using RecipeRevolutionBlazorApp.Services.Users
@inherits LayoutComponentBase
@inject AuthTokenService TokenService
@inject IRecipeService IRecipeService
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<body class="container-fluid">
    <header class="d-flex flex-wrap align-items-center justify-content-md-between py-3 mb-4 border-bottom">
        <nav class="navbar navbar-expand-lg">
            <div class="container-fluid">
                <a class="navbar-brand" href="#">
                    <img src="RecipeRevolutionNav.png" alt="Recipe Revolution" height="60">
                </a>

                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item"><a href="#" class="nav-link px-2 link-secondary">Home</a></li>
                        <li class="nav-item"><a href="HomeRecipes" class="nav-link px-2 link-dark">Recipes</a></li>
                    </ul>
                </div>
                <div class="nav-item dropdown">
                    <a @onclick="ToggleMealsDropdown" class="nav-link dropdown-toggle px-2 link-dark" href="javascript:void(0)" role="button">
                        Meals
                    </a>
                    <ul class="@mealsDropdownClass" aria-labelledby="navbarDropdownMenuLink">
                        <li><a class="dropdown-item" href="RecipeByCategory/Śniadania">Śniadania</a></li>
                        <li><a class="dropdown-item" href="RecipeByCategory/Przekąski">Przekąski</a></li>
                        <li><a class="dropdown-item" href="RecipeByCategory/Zupy i dania zupowe">Zupy i dania zupowe</a></li>
                        <li><a class="dropdown-item" href="RecipeByCategory/Sałatki">Sałatki</a></li>
                        <li><a class="dropdown-item" href="RecipeByCategory/Dania główne">Dania główne</a></li>
                        <li><a class="dropdown-item" href="RecipeByCategory/Desery">Desery</a></li>
                        <li><a class="dropdown-item" href="RecipeByCategory/Dania wegetariańskie">Dania wegetariańskie</a></li>
                        <li><a class="dropdown-item" href="RecipeByCategory/Dania wegańskie">Dania wegańskie</a></li>
                        <li><a class="dropdown-item" href="RecipeByCategory/Dania kuchni świata">Dania kuchni świata</a></li>
                        <li><a class="dropdown-item" href="RecipeByCategory/Dania na grillu">Dania na grillu</a></li>
                        <li><a class="dropdown-item" href="RecipeByCategory/Pieczenie i cukiernictwo">Pieczenie i cukiernictwo</a></li>
                    </ul>
                </div>
            </div>
        </nav>

        <form class="d-flex" @onsubmit="HandleSearch">
            <input class="form-control me-2" type="search" placeholder="Search recipe" aria-label="Search" @bind="@searchQuery">
            <button class="btn btn-outline-success" type="submit">Search</button>
        </form>

        <div class="d-flex justify-content-end">
            @if (isUserLoggedIn)
            {
                <div class="d-flex justify-content-end">
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" @onclick="ToggleDropdown">
                            Welcome, @userProfile.FirstName @userProfile.LastName
                        </button>
                        <div class="@dropdownMenuClass" aria-labelledby="dropdownMenuButton">
                            <a class="dropdown-item" href="Myrecipes">My Recipes</a>
                            <a class="dropdown-item" href="my-account">My Account</a>
                            <button class="dropdown-item" @onclick="Logout">Logout</button>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <button type="button" class="btn btn-outline-primary me-2" @onclick="() => RedirectToLoginPage()">Login</button>
                <button type="button" class="btn btn-primary" @onclick="() => RedirectToRegisterPage()">Sign-up</button>
            }
        </div>

    </header>

    <main>
        <article class="content px-4">
            @Body
        </article>
    </main>
    <footer class="py-3 my-4">
        <ul class="nav justify-content-center border-bottom pb-3 mb-3">
            <li class="nav-item"><a href="#" class="nav-link px-2 text-muted">Home</a></li>
            <li class="nav-item"><a href="HomeRecipes" class="nav-link px-2 text-muted">Recipes</a></li>
        </ul>
        <p class="text-center text-muted">© 2024 Łukasz Florek. All rights reserved.</p>
    </footer>
</body>

@code
{
    private UserProfile userProfile;
    private bool isUserLoggedIn;
    private string searchQuery;
    private IEnumerable<CategoryDto> categories;

    private bool IsUserLoggedIn => !string.IsNullOrWhiteSpace(_userToken);
    private string _userToken;

    private void RedirectToLoginPage()
    {
        NavigationManager.NavigateTo($"/login");
    }

    private void RedirectToRegisterPage()
    {
        NavigationManager.NavigateTo($"/register");
    }

    protected override async Task OnInitializedAsync()
    {
        _userToken = await TokenService.GetToken();
        isUserLoggedIn = await TokenService.IsTokenValid();

    if (!isUserLoggedIn)
    {
        NavigationManager.NavigateTo("/login");
    }
    else
    {
        userProfile = await UserService.GetUserProfile();
        categories = await IRecipeService.GetAllCategory();
    }
    }

    private async Task CheckLoginStatus()
    {
        var token = await TokenService.GetToken();
        isUserLoggedIn = !string.IsNullOrEmpty(token);
    }

    private void HandleSearch()
    {
        NavigationManager.NavigateTo($"/RecipeSearch/{searchQuery}");
    }

    private async void Logout()
    {
        await TokenService.ClearToken();
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    private void RedirectToSearchPage()
    {
        NavigationManager.NavigateTo($"/recipes");
    }

    private string dropdownMenuClass = "dropdown-menu";

    private void ToggleDropdown()
    {
        dropdownMenuClass = dropdownMenuClass.Contains("show") ? "dropdown-menu" : "dropdown-menu show";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("window.addEventListener", "click", DotNetObjectReference.Create(this), "CloseDropdown");
        }
    }

    [JSInvokable("CloseDropdown")]
    public Task CloseDropdown()
    {
        if (dropdownMenuClass.Contains("show"))
        {
            dropdownMenuClass = "dropdown-menu";
            StateHasChanged(); // Notify Blazor the state has changed to re-render
        }

        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        // Clean up the event listener when the component is disposed
        await JSRuntime.InvokeVoidAsync("window.removeEventListener", "click", DotNetObjectReference.Create(this), "CloseDropdown");
    }
    private string mealsDropdownClass = "dropdown-menu";

    private void ToggleMealsDropdown()
    {
        mealsDropdownClass = mealsDropdownClass.Contains("show") ? "dropdown-menu" : "dropdown-menu show";
    }


}
