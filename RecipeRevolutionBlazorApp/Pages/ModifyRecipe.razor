@page "/update-recipe/{id:int}"
@using RecipeRevolutionBlazorApp.Models.Recipe
@using RecipeRevolutionBlazorApp.Services.Recipes
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager

<h3>Modify Recipe</h3>

@if (!string.IsNullOrWhiteSpace(updateMessage))
{
    <div class="alert alert-success" role="alert">
        @updateMessage
    </div>
}

<EditForm Model="@recipeDto" OnValidSubmit="UpdateRecipe">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="Name">Name:</label>
        <InputText id="Name" @bind-Value="@recipeDto.Name" class="form-control" />
        <ValidationMessage For="@(() => recipeDto.Name)" />
    </div>

    <div class="form-group">
        <label for="Description">Description:</label>
        <InputText id="Description" @bind-Value="@recipeDto.Description" class="form-control" />
        <ValidationMessage For="@(() => recipeDto.Description)" />
    </div>

    <div class="form-group">
        <label for="Name">Instructions:</label>
        <InputText id="Instructions" @bind-Value="@recipeDto.Instructions" class="form-control" />
        <ValidationMessage For="@(() => recipeDto.Instructions)" />
    </div>

    <div class="form-group">
        <label for="Name">PreparationTime:</label>
        <InputNumber id="PreparationTime" @bind-Value="@recipeDto.PreparationTime" class="form-control" />
        <ValidationMessage For="@(() => recipeDto.PreparationTime)" />
    </div>

    <div class="form-group">
        <label for="Name">DifficultyLevel:</label>
        <InputText id="DifficultyLevel" @bind-Value="@recipeDto.DifficultyLevel" class="form-control" />
        <ValidationMessage For="@(() => recipeDto.DifficultyLevel)" />
    </div>

    <div class="form-group">
        <label for="Name">Portions:</label>
        <InputNumber id="Portions" @bind-Value="@recipeDto.Portions" class="form-control" />
        <ValidationMessage For="@(() => recipeDto.Portions)" />
    </div>

    <div class="form-group">
        <label for="Name">Portions:</label>
        <InputNumber id="Portions" @bind-Value="@recipeDto.Portions" class="form-control" />
        <ValidationMessage For="@(() => recipeDto.Portions)" />
    </div>

    <div>
        <label for="numericDropdown">Select a number:</label>
        <InputSelect id="numericDropdown" @bind-Value="recipeDto.CategoryId">
            @for (int i = 1; i <= 3; i++)
            {
                <option value="@i">@i</option>
            }
        </InputSelect>
        <p>Selected Number: @recipeDto.CategoryId</p>
    </div>

</EditForm>

<button class="btn btn-primary" @onclick="UpdateRecipe">Zapisz</button>
<a href="/Myrecipes" class="btn btn-secondary">Powrót</a>

@code {
    [Parameter]
    public int Id { get; set; }
    private UpdateRecipeDto recipeDto = new UpdateRecipeDto();
    private string updateMessage; // Zmienna do przechowywania komunikatu o aktualizacji

    protected override async Task OnInitializedAsync()
    {
        await LoadRecipe();
    }

    private async Task LoadRecipe()
    {
        var response = await RecipeService.GetRecipe(Id);

        if (response != null)
        {
            recipeDto = new UpdateRecipeDto
                {
                    Name = response.Name,
                    Description = response.Description,
                    Instructions = response.Instructions,
                    PreparationTime = response.PreparationTime,
                    DifficultyLevel = response.DifficultyLevel,
                    Portions = response.Portions,
                    CategoryId = response.CategoryId
                };
        }
    }

    private async Task UpdateRecipe()
    {
        await RecipeService.UpdateRecipe(Id, recipeDto);
        updateMessage = "Przepis został pomyślnie zaktualizowany."; // Ustawienie komunikatu
        StateHasChanged(); // Informuje Blazor, że stan komponentu został zmieniony
    }
}
