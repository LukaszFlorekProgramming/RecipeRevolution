@page "/update-recipe/{id:int}"
@using RecipeRevolutionBlazorApp.Models.Category
@using RecipeRevolutionBlazorApp.Models.Recipe
@using RecipeRevolutionBlazorApp.Services.Recipes
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager

<h3>Modify Recipe</h3>

@if (!string.IsNullOrWhiteSpace(updateMessage))
{
    <div class="alert alert-success" role="alert">
        @updateMessage
    </div>
}

<EditForm Model="@recipeDto" OnValidSubmit="UpdateRecipe">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="Name">Name:</label>
        <InputText id="Name" @bind-Value="@recipeDto.Name" class="form-control" />
        <ValidationMessage For="@(() => recipeDto.Name)" />
    </div>

    <div class="form-group">
        <label for="Description">Description:</label>
        <InputText id="Description" @bind-Value="@recipeDto.Description" class="form-control" />
        <ValidationMessage For="@(() => recipeDto.Description)" />
    </div>

    <div class="form-group">
        <label for="Name">Instructions:</label>
        <InputText id="Instructions" @bind-Value="@recipeDto.Instructions" class="form-control" />
        <ValidationMessage For="@(() => recipeDto.Instructions)" />
    </div>

    <div class="form-group">
        <label for="Name">PreparationTime:</label>
        <InputNumber id="PreparationTime" @bind-Value="@recipeDto.PreparationTime" class="form-control" />
        <ValidationMessage For="@(() => recipeDto.PreparationTime)" />
    </div>

    <div class="form-group">
        <label for="DifficultyLevel">Difficulty Level:</label>
        <InputSelect id="DifficultyLevel" @bind-Value="recipeDto.DifficultyLevel" class="form-control">
            <option value="1">Łatwy</option>
            <option value="2">Średni</option>
            <option value="3">Trudny</option>
        </InputSelect>
        <ValidationMessage For="@(() => recipeDto.DifficultyLevel)" />
    </div>

    <div class="form-group">
        <label for="Name">Portions:</label>
        <InputNumber id="Portions" @bind-Value="@recipeDto.Portions" class="form-control" />
        <ValidationMessage For="@(() => recipeDto.Portions)" />
    </div>

    @if (!string.IsNullOrEmpty(recipeDto.MainImage))
    {
        <div class="form-group">
            <label for="ProfilePicture">Main Picture</label>
            <img src="@recipeDto.MainImage" alt="Recipe Picture" class="img-thumbnail" />
        </div>
    }

    <div class="form-group">
        <label for="fileUpload">Update Main Picture</label>
        <InputFile id="fileUpload" OnChange="UploadMainRecipePicture" class="form-control" />
    </div>

    @if (categories != null)
    {
        <div class="form-group mt-3">
            <label for="numericDropdown">Select a category:</label>
            <InputSelect id="categoryDropdown" @bind-Value="recipeDto.CategoryId">
                @foreach (var category in categories)
                {
                    <option value="@category.CategoryId">@category.Name</option>
                }
            </InputSelect>
        </div>
    }

    <DataAnnotationsValidator />
    <ValidationSummary />

</EditForm>

<button class="btn btn-primary mt-3" @onclick="UpdateRecipe">Zapisz</button>
<a href="/Myrecipes" class="btn btn-secondary mt-3">Powrót</a>

@code {
    [Parameter]
    public int Id { get; set; }
    private UpdateRecipeDto recipeDto = new UpdateRecipeDto();
    private string updateMessage;
    private IEnumerable<CategoryDto> categories;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecipe();
    }

    private async Task LoadRecipe()
    {
        var response = await RecipeService.GetRecipe(Id);

        if (response != null)
        {
            recipeDto = new UpdateRecipeDto
                {
                    Name = response.Name,
                    Description = response.Description,
                    Instructions = response.Instructions,
                    PreparationTime = response.PreparationTime,
                    DifficultyLevel = response.DifficultyLevel,
                    Portions = response.Portions,
                    CategoryId = response.CategoryId,
                    MainImage = response.MainImage
                };
        }
    }

    private async Task UpdateRecipe()
    {
        await RecipeService.UpdateRecipe(Id, recipeDto);
        updateMessage = "Przepis został pomyślnie zaktualizowany.";
        StateHasChanged();
    }


    private async Task UploadMainRecipePicture(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using (var stream = file.OpenReadStream())
            {
                // Przy założeniu, że UserService ma metodę do przesyłania zdjęć
                var success = await RecipeService.UploadMainRecipePictureAsync(stream, file.Name,Id);
                if (success != null)
                {
                    
                }
                else
                {
                    // Obsłuż błąd, pokaż komunikat o błędzie użytkownikowi
                }
            }
        }
    }
}
