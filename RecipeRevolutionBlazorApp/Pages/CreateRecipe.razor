@page "/create-recipe"
@using RecipeRevolutionBlazorApp.Models.Category
@using RecipeRevolutionBlazorApp.Models.Image
@using RecipeRevolutionBlazorApp.Models.Recipe
@using RecipeRevolutionBlazorApp.Services.Images
@using RecipeRevolutionBlazorApp.Services.Recipes
@using System.Net.Http.Headers

@inject IRecipeService RecipeService
@inject IImageService ImageService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <h3>Stwórz przepis</h3>

            <EditForm Model="@recipeDto" OnValidSubmit="CreateRecipeMetod">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="Name">Tytuł:</label>
                    <InputText id="Name" @bind-Value="@recipeDto.Name" class="form-control" />
                    <ValidationMessage For="@(() => recipeDto.Name)" />
                </div>

                <div class="form-group">
                    <label for="Description">Opis:</label>
                    <InputText id="Description" @bind-Value="@recipeDto.Description" class="form-control" />
                    <ValidationMessage For="@(() => recipeDto.Description)" />
                </div>

                <div class="form-group">
                    <label for="Name">Instrukcje:</label>
                    <InputText id="Instructions" @bind-Value="@recipeDto.Instructions" class="form-control" />
                    <ValidationMessage For="@(() => recipeDto.Instructions)" />
                </div>

                <div class="form-group">
                    <label for="Name">Czas przygotowania w minutach:</label>
                    <InputNumber id="PreparationTime" @bind-Value="@recipeDto.PreparationTime" class="form-control" />
                    <ValidationMessage For="@(() => recipeDto.PreparationTime)" />
                </div>

                <div class="form-group">
                    <label for="DifficultyLevel">Poziom trudności:</label>
                    <select id="DifficultyLevel" class="form-control" @bind="@recipeDto.DifficultyLevel">
                        <option value="0">Wybierz poziom trudności</option>
                        <option value="1">Łatwy</option>
                        <option value="2">Średni</option>
                        <option value="3">Trudny</option>
                    </select>
                    <ValidationMessage For="@(() => recipeDto.DifficultyLevel)" />
                </div>

                <div class="form-group">
                    <label for="Name">Liczba porcji:</label>
                    <InputNumber id="Portions" @bind-Value="@recipeDto.Portions" class="form-control" />
                    <ValidationMessage For="@(() => recipeDto.Portions)" />
                </div>


                <div class="form-group">
                    <label for="image">Główne zdjęcie przepisu:</label>
                    <InputFile OnChange="@OnInputFileChange" class="form-control" />
                </div>

                @if (categories != null)
                {
                    <div class="form-group mt-3">
                        <label for="numericDropdown">Wybierz kategorie:</label>
                        <InputSelect id="categoryDropdown" @bind-Value="recipeDto.CategoryId">
                            @foreach (var category in categories)
                            {
                                <option value="@category.CategoryId">@category.Name</option>
                            }
                        </InputSelect>
                    </div>
                }

                <DataAnnotationsValidator />
                <ValidationSummary />

                <button type="submit" class="btn btn-primary mt-3">Dodaj przepis</button>
                <a href="/Myrecipes" class="btn btn-secondary  mt-3">Anuluj</a>
            </EditForm>

        </div>
    </div>
</div>


@code {
    private CreateRecipeDto recipeDto = new CreateRecipeDto();
    private IEnumerable<CategoryDto> categories;

    private Stream fileStream;
    private string fileName;
    private int recipeId;

    protected override async Task OnInitializedAsync()
    {
        categories = await RecipeService.GetAllCategory();
    }

    private async Task CreateRecipeMetod()
    {
        try
        {
            var idCreatedRecipe = await RecipeService.CreateRecipe(recipeDto);
            recipeId = idCreatedRecipe.RecipeId;
            await UploadImagemetod();
            NavigationManager.NavigateTo("/Myrecipes");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating recipe: {ex.Message}");
        }
    }

    private async Task UploadImagemetod()
    {
        var success = await RecipeService.UploadMainRecipePictureAsync(fileStream, fileName, recipeId);
        if (success != null)
        {
            Console.WriteLine("Image uploaded successfully");
        }
        else
        {
            Console.WriteLine("Failed to upload image");
        }
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            fileName = file.Name;
            fileStream = file.OpenReadStream();
        }
    }
}