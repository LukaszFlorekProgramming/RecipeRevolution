@page "/reset-password-confirm"
@using RecipeRevolutionBlazorApp.Services.Users
@inject IUserService UserService
@inject NavigationManager Navigation
<PageTitle>Potwierdzenie resetowania hasła</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <h3>Potwierdź resetowanie hasła</h3>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success">@successMessage</div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <EditForm Model="@confirmResetPasswordDto" OnValidSubmit="ConfirmResetPasswordAsync">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="Code">Kod do restartowania hasła</label>
                    <InputText id="Code" @bind-Value="confirmResetPasswordDto.ResetCode" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="NewPassword">Nowe hasło</label>
                    <InputText id="NewPassword" type="password" @bind-Value="confirmResetPasswordDto.NewPassword" class="form-control" />
                </div>

                <div class="form-group d-flex justify-content-center mt-3">
                    <button type="submit" class="btn btn-primary">Potwierdź reset</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private Models.User.ConfirmResetPasswordDto confirmResetPasswordDto = new Models.User.ConfirmResetPasswordDto();
    private string successMessage;
    private string errorMessage;

    private string email;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        email = query["email"];
        confirmResetPasswordDto.Email = email;
    }

    private async Task ConfirmResetPasswordAsync()
    {
        try
        {
            var result = await UserService.ConfirmResetPassword(confirmResetPasswordDto);
            if (result)
            {
                successMessage = "Twoje hasło zostało pomyślnie zresetowane.";
                Navigation.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Błąd resetowania hasła. Sprawdź kod resetowania i spróbuj ponownie.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }
}
