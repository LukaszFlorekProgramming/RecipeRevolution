@page "/recipe/{id:int}"
@using RecipeRevolutionBlazorApp.Models.Comment
@using RecipeRevolutionBlazorApp.Models.Image
@using RecipeRevolutionBlazorApp.Models.Recipe
@using RecipeRevolutionBlazorApp.Services.Comments
@using RecipeRevolutionBlazorApp.Services.Recipes
@using RecipeRevolutionBlazorApp.Services.Token
@inject IRecipeService IRecipeService
@inject ICommentService CommentService
@inject AuthTokenService AuthTokenService


@inject NavigationManager NavigationManager


@if (recipe != null)
{
    <div class="recipe-container">
        <div class="row">
            <div class="col-lg-8">
                <div class="recipe-header">
                    <h2>@recipe.Name</h2>
                    <p><strong>Opis:</strong> @recipe.Description</p>
                    <p><strong>Instrukcje:</strong> @recipe.Instructions</p>
                    <button class="btn btn-secondary" @onclick="GoBack">Powrót</button>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="recipe-info">
                    <div class="recipe-attribute">
                        <i class="bi bi-people-fill"></i>
                        <span class="attribute-title">Ilość porcji</span>
                        <span class="attribute-value">@recipe.Portions</span>
                    </div>
                    <div class="recipe-attribute">
                        <i class="bi bi-graph-up"></i>
                        <span class="attribute-title">Poziom trudności</span>
                        <span class="attribute-value">
                            @switch (recipe.DifficultyLevel)
                            {
                                case 1:
                                    @:Łatwy
                                    break;
                                case 2:
                                    @:Średni
                                    break;
                                case 3:
                                    @:Trudny
                                    break;
                                default:
                                    @:Nieznany
                                    break;
                            }
                        </span>
                    </div>

                    <div class="recipe-attribute">
                        <i class="bi bi-clock-fill"></i>
                        <span class="attribute-title">Czas przygotowania</span>
                        <span class="attribute-value">@recipe.PreparationTime min</span>
                    </div>
                </div>
                <img src="@recipe.MainImage" class="card-img-top" alt="@recipe.Name" style="width: 100%; height: auto; object-fit: cover;">
                <div class="button-group" style="text-align: center; padding-top: 20px;">
                    <button class="btn btn-outline-secondary">
                        <i class="bi bi-heart icon-small"></i> Zapisz
                    </button>
                    <button class="btn btn-outline-secondary">
                        <i class="bi bi-download icon-small"></i> Pobierz
                    </button>
                </div>
                

            </div>
            @if (comments != null && comments.Any())
            {
                <div class="comments-section">
                    <h3>Komentarze</h3>
                    @foreach (var comment in comments)
                    {
                        <div class="comment">
                            <div class="comment-header">
                                <strong>@comment.FirstName @comment.LastName</strong> @comment.CreatedAt.ToString("dd.MM.yyyy HH:mm")
                            </div>
                            <div class="comment-body">
                                @comment.Text
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <h3>Komentarze</h3>
                <p>Brak komentarzy do tego przepisu.</p>
            }
            <div class="add-comment-section">
            <EditForm Model="@newComment" OnValidSubmit="AddComment">
                <DataAnnotationsValidator />

                <h4>Dodaj komentarz</h4>
                    <InputText id="Comment" @bind-Value="@newComment.Text" class="form-control" />
                    <ValidationMessage For="@(() => newComment.Text)" />
                <button type="submit" class="btn btn-primary mt-2">Dodaj komentarz</button>
            </EditForm>
        </div>


        </div>
    </div>


}
else
{
    <p>Ładowanie ...</p>
}

@code {
    [Parameter] public int Id { get; set; }
    private RecipeDto recipe;
    private List<DisplayCommentDto> comments = new List<DisplayCommentDto>();
    private CommentDto newComment = new CommentDto();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        recipe = await IRecipeService.GetRecipe(Id);
        comments = await CommentService.GetRecipeComments(Id);

    }
    private  void GoBack()
    {
        NavigationManager.NavigateTo("/HomeRecipes");
    }

    private async Task AddComment()
    {
        var isTokenValid = await AuthTokenService.IsTokenValid();
        if (!isTokenValid)
        {
            errorMessage = "Musisz być zalogowany, aby dodać komentarz.";
            return;
        }

        try
        {
            newComment.RecipeId = Id;
            await CommentService.CreateComment(newComment);
            comments = await CommentService.GetRecipeComments(Id);
            newComment = new CommentDto();
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Nie udało się dodać komentarza: {ex.Message}";
        }
    }

}
<style>
    .recipe-info {
        display: flex;
        justify-content: space-around;
        align-items: center;
    }

    .recipe-attribute {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .attribute-title {
        font-size: 0.85em;
        color: #6c757d;
        margin-top: 0.5em;
    }

    .attribute-value {
        font-size: 1em;
        color: #000;
    }

    .bi {
        font-size: 2em;
        color: #dc3545;
    }

    .button-group .btn {
        margin: 5px;
    }

    .button-group .btn i {
        margin-right: 5px;
    }

    .icon-small {
        font-size: 0.75rem;
    }

    .comments-section {
        margin-top: 20px;
    }

    .comment {
        background-color: #f9f9f9;
        border: 1px solid #e1e1e1;
        border-radius: 5px;
        margin-bottom: 15px;
        padding: 10px;
    }

    .comment-header {
        border-bottom: 1px solid #e1e1e1;
        padding-bottom: 5px;
        margin-bottom: 5px;
        color: #333;
    }

    .comment-body {
        color: #666;
    }

</style>
