@page "/MyRecipes"
@using RecipeRevolutionBlazorApp.Models.Recipe
@using RecipeRevolutionBlazorApp.Services.Recipes
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager


<button class="btn btn-primary mb-4" @onclick="NavigateToAddRecipe">Dodaj Przepis</button>

<h3 style="text-align: center;">Moje Przepisy</h3>

@if (RecipesResult == null)
{
    <p><em>Ładowanie przepisów...</em></p>
}
else
{

    @if (RecipesResult.Any())
    {
        <table class="table">
            <thead class="table-dark">
                <tr>
                    <th>Tytuł</th>
                    <th>Opis</th>
                    <th>Instrukcje</th>
                    <th>Czas przygotowania(min)</th>
                    <th>Poziom trudności:</th>
                    <th>Liczba porcji:</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in RecipesResult)
                {
                    <tr @onclick="() => NavigateToRecipeDetails(item.RecipeId)">
                        <td>@item.Name</td>
                        <td class="tdStyle">@item.Description</td>
                        <td class="tdStyle">@TruncateText(item.Instructions, 20)</td>
                        <td>@item.PreparationTime</td>
                        <td>
                            @switch (item.DifficultyLevel)
                            {
                                case 1:
                                    @:Łatwy
                                    break;
                                case 2:
                                    @:Średni
                                    break;
                                case 3:
                                    @:Trudny
                                    break;
                                default:
                                    @:Nieznany
                                    break;
                            }
                        </td>
                        <td>@item.Portions</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => NavigateToEditRecipe(item.RecipeId)" @onclick:stopPropagation="true">Edytuj</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteRecipe(item.RecipeId)" @onclick:stopPropagation="true">Usuń</button>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    }
    else
    {
        <p>Nie masz jeszcze żadnych przepisów.</p>
    }
}

@code {

    private IEnumerable<RecipeDto> RecipesResult;

    protected override async Task OnInitializedAsync()
    {
        RecipesResult = await RecipeService.GetUserRecipes();
    }

    private void NavigateToAddRecipe()
    {
        NavigationManager.NavigateTo("/create-recipe");
    }

    private void NavigateToRecipeDetails(int recipeId)
    {
        NavigationManager.NavigateTo($"/recipe/{recipeId}");
    }

    private void NavigateToEditRecipe(int recipeId)
    {
        NavigationManager.NavigateTo($"/update-recipe/{recipeId}");
    }
    private async Task DeleteRecipe(int recipeId)
    {
        await RecipeService.DeleteRecipe(recipeId);
        RecipesResult = await RecipeService.GetUserRecipes();
        StateHasChanged();
    }
    private string TruncateText(string text, int wordCount)
    {
        var words = text.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        if (words.Length <= wordCount) return text;
        return string.Join(" ", words.Take(wordCount)) + "...";
    }

}


<style>
    
    .tdStyle
    {
        max-width: 200px;
    }


</style>