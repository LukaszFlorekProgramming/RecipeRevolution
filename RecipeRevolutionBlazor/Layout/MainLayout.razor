@using RecipeRevolutionBlazor.Services.Users
@inherits LayoutComponentBase
@inject AuthTokenService TokenService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<body class="container-fluid">
    <header class="d-flex flex-wrap align-items-center justify-content-md-between py-3 mb-4 border-bottom">
        <nav class="navbar navbar-expand-lg">
            <div class="container-fluid">
                <a class="navbar-brand" href="#">Recipe Revolution</a>

                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item"><a href="#" class="nav-link px-2 link-secondary">Home</a></li>
                        <li class="nav-item"><a href="HomeRecipes" class="nav-link px-2 link-dark">Recipes</a></li>
                        <li class="nav-item"><a href="dropdown" class="nav-link px-2 link-dark">Recipes</a></li>
                    </ul>
                </div>
            </div>
        </nav>

        <form class="d-flex" @onsubmit="HandleSearch">
            <input class="form-control me-2" type="search" placeholder="Search recipe" aria-label="Search" @bind="@searchQuery">
            <button class="btn btn-outline-success" type="submit">Search</button>
        </form>

        <div class="d-flex justify-content-end">
        @if (!string.IsNullOrEmpty(TokenService.Token))
        {
            @* <span class="nav-link">Welcome, @TokenService.GetUserNameFromToken() !</span>
            <ul class="nav col-12 col-md-auto mb-2 mb-md-0">
                <li><a href="Myrecipes" class="nav-link px-2 link-secondary">My Recipes</a></li>
                
            </ul>
            <button type="button" class="btn btn-warning" @onclick="Logout">Wyloguj</button> *@
                <div class="d-flex justify-content-end">
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" @onclick="ToggleDropdown">
                            Welcome, @TokenService.GetUserNameFromToken()
                        </button>
                        <div class="@dropdownMenuClass" aria-labelledby="dropdownMenuButton">
                            <a class="dropdown-item" href="Myrecipes">My Recipes</a>
                            <button class="dropdown-item" @onclick="Logout">Logout</button>
                        </div>
                    </div>
                </div>
        }
        else
        {
             <button type="button" class="btn btn-outline-primary me-2" @onclick="() => RedirectToLoginPage()">Login</button>
             <button type="button" class="btn btn-primary" @onclick="() => RedirectToRegisterPage()">Sign-up</button>
        }
        </div>

    </header>
    <menu>
        <article class="content px-3">
            @Body
        </article>
    </menu>
    <footer class="py-3 my-4">
        <ul class="nav justify-content-center border-bottom pb-3 mb-3">
            <li class="nav-item"><a href="#" class="nav-link px-2 text-muted">Home</a></li>
            <li class="nav-item"><a href="HomeRecipes" class="nav-link px-2 text-muted">Recipes</a></li>
        </ul>
        <p class="text-center text-muted">© 2023 Łukasz Florek. All rights reserved.</p>
    </footer>

</body>

@code {
    private string searchQuery;

    private void HandleSearch()
    {
        NavigationManager.NavigateTo($"/RecipeSearch/{searchQuery}");
    }


    private void Logout()
    {
        TokenService.RemoveToken();
        NavigationManager.NavigateTo("/HomeRecipes", forceLoad: true);
    }

    private void RedirectToLoginPage()
    {
        NavigationManager.NavigateTo($"/login");
    }

    private void RedirectToRegisterPage()
    {
        NavigationManager.NavigateTo($"/register");
    }
    private void RedirectToSearchPage()
    {
        NavigationManager.NavigateTo($"/recipes");
    }

    private string dropdownMenuClass = "dropdown-menu";

    private void ToggleDropdown()
    {
        dropdownMenuClass = dropdownMenuClass.Contains("show") ? "dropdown-menu" : "dropdown-menu show";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("window.addEventListener", "click", DotNetObjectReference.Create(this), "CloseDropdown");
        }
    }

    [JSInvokable("CloseDropdown")]
    public Task CloseDropdown()
    {
        if (dropdownMenuClass.Contains("show"))
        {
            dropdownMenuClass = "dropdown-menu";
            StateHasChanged(); // Notify Blazor the state has changed to re-render
        }

        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        // Clean up the event listener when the component is disposed
        await JSRuntime.InvokeVoidAsync("window.removeEventListener", "click", DotNetObjectReference.Create(this), "CloseDropdown");
    }



}