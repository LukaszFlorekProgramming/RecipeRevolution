@page "/recipeshome"
@using RecipeRevolutionBlazor.Models
@using RecipeRevolutionBlazor.Services.Recipes;
@inject IRecipeService IRecipeService;
@inject NavigationManager NavigationManager

<h3>RecipesHome</h3>

@if (recipesPagedResult != null && recipesPagedResult.Items.Any())
{
    <div class="container">
        <div class="row">
            @foreach (var recipe in recipesPagedResult.Items)
            {
                <div class="col-md-3 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@recipe.Name</h5>
                            @if (recipe.Data != null)
                            {
                                <img src="data:image/jpeg;base64,@(Convert.ToBase64String(recipe.Data))" class="card-img-top" alt="Image">
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div>
        <input type="button" class="btnk-lg btn" id="prev" @onclick="PreviousPage" value="Previous" />
        @for (int i = PageNumber - 2; i <= PageNumber + 2; i++)
        {
            int j = i;
            if (i > 0)
            {
                if (i == PageNumber)
                {
                    <span class="px-2" style="font-weight:bold;cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                }
                else
                {
                    <span class="px-2" style="cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                }
            }
        }
        <input type="button" class="btnk-lg btn" id="next" @onclick="NextPage" value="Next" />
    </div>
}
else
{
    <p>Loading recipes...</p>
}

@code {

    private PagedResult<RecipeWithPhotoDto> recipesPagedResult;
    public string SearchPhrase { get; set; } = "";
    private int PageNumber { get; set; } = 1;
    private int PageSize { get; set; } = 16;

    protected override async Task OnInitializedAsync()
    {
        RecipeQuery query = new RecipeQuery
            {
                SearchPhrase = "",
                PageNumber = 1,
                PageSize = 5
            };
        recipesPagedResult = await IRecipeService.GetAllWithPhoto(query);
    }
    protected async Task NextPage()
    {
        PageNumber++;
        await Search();
    }

    protected async Task PreviousPage()
    {
        PageNumber--;
        await Search();
    }
    protected async Task ShowPage(int i)
    {
        PageNumber = i;
        await Search();
    }

    private async Task Search()
    {
        RecipeQuery query = new RecipeQuery
            {
                SearchPhrase = SearchPhrase,
                PageNumber = PageNumber,
                PageSize = PageSize
            };
        recipesPagedResult = await IRecipeService.GetAllWithPhoto(query);
    }
    private void RedirectToDetailsPage(int id)
    {
        NavigationManager.NavigateTo($"/recipe/{id}");
    }

}
