@page "/Myrecipes"
@using RecipeRevolutionBlazor.Models
@using RecipeRevolutionBlazor.Services.Recipes
@using RecipeRevolutionBlazor.Services.Users
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@inject IRecipeService IRecipeService;
@inject NavigationManager NavigationManager
@inject AuthTokenService AuthTokenService


@if (AuthTokenService.Token == null)
{
    <p>Please log in to view your recipes.</p>
}
else
{
<table class="table table-striped table-bordered bg-light">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Instructions</th>
            <th>PreparationTime</th>
            <th>DifficultyLevel</th>
            <th>Portions</th>
            <th>Id</th>
            <th></th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        @if (recipes == null)
        {
            <p>Loading...</p>
        }
        else
        {
            @foreach (var recipe in recipes)
            {
                <tr>
                    <td>@recipe.Name</td>
                    <td>@recipe.Description</td>
                    <td>@recipe.Instructions</td>
                    <td>@recipe.PreparationTime</td>
                    <td>@recipe.DifficultyLevel</td>
                    <td>@recipe.Portions</td>
                    <td>@recipe.RecipeId</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => NavigateToModifyPage(recipe.RecipeId)">Modify</button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteRecipe(recipe.RecipeId)">Delete</button>
                    </td>

                </tr>
            }
        }
    </tbody>
</table>

<button type="button" class="btn btn-primary" @onclick="() => NavigateToCreatePage()">Create recipe</button>

}

@code{
    private IEnumerable<MyRecipeDto> recipes;
    private int NameIdentyfiker;

    protected override async Task OnInitializedAsync()
    {
        if (AuthTokenService.Token != null)
        {
            ReadToken();
            await LoadUserRecipes();
        }
        
        
    }

    private async Task LoadUserRecipes()
    {
        var response = await IRecipeService.GetUserRecipes(42);

        if (response != null)
        {
            recipes = response;
        }
    }

    private async Task DeleteRecipe(int recipeId)
    {
        await IRecipeService.Delete(recipeId);
        await LoadUserRecipes();
    }

    private void NavigateToModifyPage(int recipeId)
    {
        NavigationManager.NavigateTo($"/ModifyRecipe/{recipeId}");
    }
    private void ReadToken()
    {
        var handler = new JwtSecurityTokenHandler();
        var jsonToken = handler.ReadToken(AuthTokenService.Token) as JwtSecurityToken;
        var IdClaim = jsonToken.Claims.FirstOrDefault(claim => claim.Type == ClaimTypes.NameIdentifier);
        NameIdentyfiker = int.Parse(IdClaim.Value);
    }

    private void NavigateToCreatePage()
    {
        NavigationManager.NavigateTo($"/createRecipe");
    }

}