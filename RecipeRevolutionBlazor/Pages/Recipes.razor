@page "/recipes"
@page "/recipes/{SearchQuery}"
@using RecipeRevolutionBlazor.Models
@using RecipeRevolutionBlazor.Services.Recipes
@using RecipeRevolutionBlazor.Services.RecipesPagination

@inject IRecipeService IRecipeService;
@inject NavigationManager NavigationManager

<h3>RecipeList</h3>

@* <div>
    <label for="search">Szukaj: </label>
    <input id="search" @bind="@SearchPhrase" />
    <button @onclick="Search">Szukaj</button>
</div> *@

@if (recipesPagedResult != null && recipesPagedResult.Items.Any())
{
    <div class="container">
        <div class="row">
            @foreach (var recipe in recipesPagedResult.Items)
            {
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@recipe.Name</h5>
                            <p class="card-text">@recipe.Description</p>
                            <p class="card-text">Czas przygotowania: @recipe.PreparationTime</p>
                            <p class="card-text">Poziom trudności: @recipe.DifficultyLevel</p>
                            <p class="card-text">Porcje: @recipe.Portions</p>
                            <button class="btn btn-primary" @onclick="() => RedirectToDetailsPage(recipe.RecipeId)">Zobacz szczegóły</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div>
        <input type="button" class="btnk-lg btn" id="prev" @onclick="PreviousPage" value="Previous" />
        @for(int i = PageNumber - 2; i <= PageNumber + 2; i++)
        {
            int j = i;
            if(i > 0)
            {
                if(i == PageNumber)
                {
                    <span class="px-2" style="font-weight:bold;cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                }
                else
                {
                    <span class="px-2" style="cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                }
            }
        }
        <input type="button" class="btnk-lg btn" id="next" @onclick="NextPage" value="Next" />
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    private PagedResult<RecipeDto> recipesPagedResult;
    [Parameter] public string SearchQuery { get; set; }
    private int PageNumber { get; set; } = 1;
    private int PageSize { get; set; } = 16;


    protected override async Task OnParametersSetAsync()
    {
        await Search();
    }

    protected override async Task OnInitializedAsync()
    {
        RecipeQuery query = new RecipeQuery
            {
                SearchPhrase = SearchQuery,
                PageNumber = 1,
                PageSize = 16
            };

        recipesPagedResult = await IRecipeService.GetAll(query);
    }


    protected async Task NextPage()
    {
        PageNumber++;
        await Search();
    }

    protected async Task PreviousPage()
    {
        PageNumber--;
        await Search();
    }
    protected async Task ShowPage(int i)
    {
        PageNumber = i;
        await Search();
    }

    private async Task Search()
    {
        RecipeQuery query = new RecipeQuery
        {
            SearchPhrase = SearchQuery,
            PageNumber = PageNumber,
            PageSize = PageSize
        };
        recipesPagedResult = await IRecipeService.GetAll(query);
    }
    private void RedirectToDetailsPage(int id)
    {
        NavigationManager.NavigateTo($"/recipe/{id}");
    }

}